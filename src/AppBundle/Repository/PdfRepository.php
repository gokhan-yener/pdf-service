<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Query;

/**
 * PdfRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PdfRepository extends \Doctrine\ORM\EntityRepository
{
    public function findOneByPersonalIdNumberAndPolIdAndSlugs(
        string $personalIdNumber,
        string $polId,
        string $insuranceSlug,
        string $pdfTypeSlug,
        $hydrationMode = Query::HYDRATE_OBJECT
    )
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb
            ->select('Pdf')
            ->from('AppBundle\Entity\Pdf', 'Pdf')
            ->where('Pdf.personalIdNumber = :personalIdNumber')
            ->andWhere('Pdf.polId = :polId')
            ->andWhere('Pdf.insuranceSlug = :insuranceSlug')
            ->andWhere('Pdf.pdfTypeSlug = :pdfTypeSlug')
            ->setParameters([
                'personalIdNumber' => $personalIdNumber,
                'polId' => $polId,
                'insuranceSlug' => $insuranceSlug,
                'pdfTypeSlug' => $pdfTypeSlug,
            ])
        ;

        $query = $qb->getQuery();

        return $query->getOneOrNullResult($hydrationMode);

    }

    public function findAllByPersonalIdNumberAndPolIdAndInsuranceSlug(
        string $personalIdNumber,
        string $polId,
        string $insuranceSlug,
        $hydrationMode = Query::HYDRATE_OBJECT
    )
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb
            ->select('partial Pdf.{id, moreumDocumentId, personalIdNumber, polId, policyNumber, insuranceSlug, pdfTypeSlug, dirName, fileName}')
            ->from('AppBundle\Entity\Pdf', 'Pdf')
            ->where('Pdf.personalIdNumber = :personalIdNumber')
            ->andWhere('Pdf.polId = :polId')
            ->andWhere('Pdf.insuranceSlug = :insuranceSlug')
            ->orderBy('Pdf.pdfTypeSlug', 'ASC')
            ->setParameters([
                'personalIdNumber' => $personalIdNumber,
                'polId' => $polId,
                'insuranceSlug' => $insuranceSlug,
            ])
        ;

        $query = $qb->getQuery();

        return $query->getResult($hydrationMode);
    }

    public function findAllUnarchived($hydrationMode = Query::HYDRATE_OBJECT)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb
            ->select('Pdf')
            ->from('AppBundle\Entity\Pdf', 'Pdf')
            ->where('Pdf.isArchivalRequired = true')
            ->orderBy('Pdf.updatedAt', 'ASC')
        ;

        $query = $qb->getQuery();

        return $query->getResult($hydrationMode);
    }
}
